// Code generated by mksizeclasses_noos.go; DO NOT EDIT.
//go:generate go run mksizeclasses_noos.go

package runtime

// class  bytes/obj  bytes/span  objects  tail waste  max waste
//     1          8         256       32           0     87.50%
//     2         16         256       16           0     43.75%
//     3         32         256        8           0     46.88%
//     4         48         256        5          16     35.55%
//     5         64         256        4           0     23.44%
//     6         80         256        3          16     23.83%
//     7         96         512        5          32     20.90%
//     8        128         256        2           0     24.22%
//     9        144         768        5          48     16.02%
//    10        160         512        3          32     15.04%
//    11        192         768        4           0     16.15%
//    12        208        1280        6          32      9.53%
//    13        256         256        1           0     18.36%
//    14        288        1280        4         128     19.69%
//    15        320        1024        3          64     15.33%
//    16        384         768        2           0     16.41%
//    17        416        1280        3          32      9.77%
//    18        512         512        1           0     18.55%

const (
	_MaxSmallSize   = 512
	smallSizeDiv    = 8
	smallSizeMax    = 256
	largeSizeDiv    = 128
	_NumSizeClasses = 19
	_PageShift      = 8
)

var class_to_size = [_NumSizeClasses]uint16{0, 8, 16, 32, 48, 64, 80, 96, 128, 144, 160, 192, 208, 256, 288, 320, 384, 416, 512}
var class_to_allocnpages = [_NumSizeClasses]uint8{0, 1, 1, 1, 1, 1, 1, 2, 1, 3, 2, 3, 5, 1, 5, 4, 3, 5, 2}

type divMagic struct {
	shift    uint8
	shift2   uint8
	mul      uint16
	baseMask uint16
}

var class_to_divmagic = [_NumSizeClasses]divMagic{{0, 0, 0, 0}, {3, 0, 1, 65528}, {4, 0, 1, 65520}, {5, 0, 1, 65504}, {4, 5, 11, 0}, {6, 0, 1, 65472}, {4, 6, 13, 0}, {5, 5, 11, 0}, {7, 0, 1, 65408}, {4, 8, 29, 0}, {5, 6, 13, 0}, {6, 5, 11, 0}, {4, 10, 79, 0}, {8, 0, 1, 65280}, {5, 8, 29, 0}, {6, 6, 13, 0}, {7, 3, 3, 0}, {5, 6, 5, 0}, {9, 0, 1, 65024}}
var size_to_class8 = [smallSizeMax/smallSizeDiv + 1]uint8{0, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 13, 13, 13}
var size_to_class128 = [(_MaxSmallSize-smallSizeMax)/largeSizeDiv + 1]uint8{13, 16, 18}
