// DO NOT EDIT THIS FILE. GENERATED BY xgen.

package pft

import (
	"embedded/mmio"
	"unsafe"
)

type Periph struct {
	CLIDR  RCLIDR
	CTR    RCTR
	CCSIDR RCCSIDR
	CSSELR RCSSELR
}

func PFT() *Periph { return (*Periph)(unsafe.Pointer(uintptr(0xE000ED78))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type CLIDR uint32

type RCLIDR struct{ mmio.U32 }

func (r *RCLIDR) LoadBits(mask CLIDR) CLIDR { return CLIDR(r.U32.LoadBits(uint32(mask))) }
func (r *RCLIDR) StoreBits(mask, b CLIDR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCLIDR) SetBits(mask CLIDR)        { r.U32.SetBits(uint32(mask)) }
func (r *RCLIDR) ClearBits(mask CLIDR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCLIDR) Load() CLIDR               { return CLIDR(r.U32.Load()) }
func (r *RCLIDR) Store(b CLIDR)             { r.U32.Store(uint32(b)) }

type RMCLIDR struct{ mmio.UM32 }

func (rm RMCLIDR) Load() CLIDR   { return CLIDR(rm.UM32.Load()) }
func (rm RMCLIDR) Store(b CLIDR) { rm.UM32.Store(uint32(b)) }

func CL1I_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL1I)}}
}

func CL1D_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL1D)}}
}

func CL1U_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL1U)}}
}

func CL2I_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL2I)}}
}

func CL2D_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL2D)}}
}

func CL2U_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL2U)}}
}

func CL3I_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL3I)}}
}

func CL3D_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL3D)}}
}

func CL3U_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL3U)}}
}

func CL4I_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL4I)}}
}

func CL4D_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL4D)}}
}

func CL4U_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL4U)}}
}

func CL5I_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL5I)}}
}

func CL5D_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL5D)}}
}

func CL5U_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL5U)}}
}

func CL6I_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL6I)}}
}

func CL6D_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL6D)}}
}

func CL6U_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL6U)}}
}

func CL7I_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL7I)}}
}

func CL7D_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL7D)}}
}

func CL7U_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(CL7U)}}
}

func LoUIS_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(LoUIS)}}
}

func LoC_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(LoC)}}
}

func LoU_(p *Periph) RMCLIDR {
	return RMCLIDR{mmio.UM32{&p.CLIDR.U32, uint32(LoU)}}
}

type CTR uint32

type RCTR struct{ mmio.U32 }

func (r *RCTR) LoadBits(mask CTR) CTR { return CTR(r.U32.LoadBits(uint32(mask))) }
func (r *RCTR) StoreBits(mask, b CTR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCTR) SetBits(mask CTR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCTR) ClearBits(mask CTR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCTR) Load() CTR             { return CTR(r.U32.Load()) }
func (r *RCTR) Store(b CTR)           { r.U32.Store(uint32(b)) }

type RMCTR struct{ mmio.UM32 }

func (rm RMCTR) Load() CTR   { return CTR(rm.UM32.Load()) }
func (rm RMCTR) Store(b CTR) { rm.UM32.Store(uint32(b)) }

func IMinLine_(p *Periph) RMCTR {
	return RMCTR{mmio.UM32{&p.CTR.U32, uint32(IMinLine)}}
}

func DMinLine_(p *Periph) RMCTR {
	return RMCTR{mmio.UM32{&p.CTR.U32, uint32(DMinLine)}}
}

func ERG_(p *Periph) RMCTR {
	return RMCTR{mmio.UM32{&p.CTR.U32, uint32(ERG)}}
}

func CWG_(p *Periph) RMCTR {
	return RMCTR{mmio.UM32{&p.CTR.U32, uint32(CWG)}}
}

func Format_(p *Periph) RMCTR {
	return RMCTR{mmio.UM32{&p.CTR.U32, uint32(Format)}}
}

type CCSIDR uint32

type RCCSIDR struct{ mmio.U32 }

func (r *RCCSIDR) LoadBits(mask CCSIDR) CCSIDR { return CCSIDR(r.U32.LoadBits(uint32(mask))) }
func (r *RCCSIDR) StoreBits(mask, b CCSIDR)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCSIDR) SetBits(mask CCSIDR)         { r.U32.SetBits(uint32(mask)) }
func (r *RCCSIDR) ClearBits(mask CCSIDR)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCCSIDR) Load() CCSIDR                { return CCSIDR(r.U32.Load()) }
func (r *RCCSIDR) Store(b CCSIDR)              { r.U32.Store(uint32(b)) }

type RMCCSIDR struct{ mmio.UM32 }

func (rm RMCCSIDR) Load() CCSIDR   { return CCSIDR(rm.UM32.Load()) }
func (rm RMCCSIDR) Store(b CCSIDR) { rm.UM32.Store(uint32(b)) }

func LineSize_(p *Periph) RMCCSIDR {
	return RMCCSIDR{mmio.UM32{&p.CCSIDR.U32, uint32(LineSize)}}
}

func Associativity_(p *Periph) RMCCSIDR {
	return RMCCSIDR{mmio.UM32{&p.CCSIDR.U32, uint32(Associativity)}}
}

func NumSets_(p *Periph) RMCCSIDR {
	return RMCCSIDR{mmio.UM32{&p.CCSIDR.U32, uint32(NumSets)}}
}

func WA_(p *Periph) RMCCSIDR {
	return RMCCSIDR{mmio.UM32{&p.CCSIDR.U32, uint32(WA)}}
}

func RA_(p *Periph) RMCCSIDR {
	return RMCCSIDR{mmio.UM32{&p.CCSIDR.U32, uint32(RA)}}
}

func WB_(p *Periph) RMCCSIDR {
	return RMCCSIDR{mmio.UM32{&p.CCSIDR.U32, uint32(WB)}}
}

func WT_(p *Periph) RMCCSIDR {
	return RMCCSIDR{mmio.UM32{&p.CCSIDR.U32, uint32(WT)}}
}

type CSSELR uint32

type RCSSELR struct{ mmio.U32 }

func (r *RCSSELR) LoadBits(mask CSSELR) CSSELR { return CSSELR(r.U32.LoadBits(uint32(mask))) }
func (r *RCSSELR) StoreBits(mask, b CSSELR)    { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSSELR) SetBits(mask CSSELR)         { r.U32.SetBits(uint32(mask)) }
func (r *RCSSELR) ClearBits(mask CSSELR)       { r.U32.ClearBits(uint32(mask)) }
func (r *RCSSELR) Load() CSSELR                { return CSSELR(r.U32.Load()) }
func (r *RCSSELR) Store(b CSSELR)              { r.U32.Store(uint32(b)) }

type RMCSSELR struct{ mmio.UM32 }

func (rm RMCSSELR) Load() CSSELR   { return CSSELR(rm.UM32.Load()) }
func (rm RMCSSELR) Store(b CSSELR) { rm.UM32.Store(uint32(b)) }

func InD_(p *Periph) RMCSSELR {
	return RMCSSELR{mmio.UM32{&p.CSSELR.U32, uint32(InD)}}
}

func Level_(p *Periph) RMCSSELR {
	return RMCSSELR{mmio.UM32{&p.CSSELR.U32, uint32(Level)}}
}
