// DO NOT EDIT THIS FILE. GENERATED BY xgen.

package scid

import (
	"embedded/mmio"
	"unsafe"
)

type Periph struct {
	MCR   RMCR
	ICTR  RICTR
	ACTLR RACTLR
}

func SCID() *Periph { return (*Periph)(unsafe.Pointer(uintptr(0xE000E000))) }

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

type MCR uint32

type RMCR struct{ mmio.U32 }

func (r *RMCR) LoadBits(mask MCR) MCR { return MCR(r.U32.LoadBits(uint32(mask))) }
func (r *RMCR) StoreBits(mask, b MCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RMCR) SetBits(mask MCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RMCR) ClearBits(mask MCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RMCR) Load() MCR             { return MCR(r.U32.Load()) }
func (r *RMCR) Store(b MCR)           { r.U32.Store(uint32(b)) }

type RMMCR struct{ mmio.UM32 }

func (rm RMMCR) Load() MCR   { return MCR(rm.UM32.Load()) }
func (rm RMMCR) Store(b MCR) { rm.UM32.Store(uint32(b)) }

type ICTR uint32

type RICTR struct{ mmio.U32 }

func (r *RICTR) LoadBits(mask ICTR) ICTR { return ICTR(r.U32.LoadBits(uint32(mask))) }
func (r *RICTR) StoreBits(mask, b ICTR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RICTR) SetBits(mask ICTR)       { r.U32.SetBits(uint32(mask)) }
func (r *RICTR) ClearBits(mask ICTR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RICTR) Load() ICTR              { return ICTR(r.U32.Load()) }
func (r *RICTR) Store(b ICTR)            { r.U32.Store(uint32(b)) }

type RMICTR struct{ mmio.UM32 }

func (rm RMICTR) Load() ICTR   { return ICTR(rm.UM32.Load()) }
func (rm RMICTR) Store(b ICTR) { rm.UM32.Store(uint32(b)) }

func INTLINESNUM_(p *Periph) RMICTR {
	return RMICTR{mmio.UM32{&p.ICTR.U32, uint32(INTLINESNUM)}}
}

type ACTLR uint32

type RACTLR struct{ mmio.U32 }

func (r *RACTLR) LoadBits(mask ACTLR) ACTLR { return ACTLR(r.U32.LoadBits(uint32(mask))) }
func (r *RACTLR) StoreBits(mask, b ACTLR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RACTLR) SetBits(mask ACTLR)        { r.U32.SetBits(uint32(mask)) }
func (r *RACTLR) ClearBits(mask ACTLR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RACTLR) Load() ACTLR               { return ACTLR(r.U32.Load()) }
func (r *RACTLR) Store(b ACTLR)             { r.U32.Store(uint32(b)) }

type RMACTLR struct{ mmio.UM32 }

func (rm RMACTLR) Load() ACTLR   { return ACTLR(rm.UM32.Load()) }
func (rm RMACTLR) Store(b ACTLR) { rm.UM32.Store(uint32(b)) }

func DISMCYCINT_(p *Periph) RMACTLR {
	return RMACTLR{mmio.UM32{&p.ACTLR.U32, uint32(DISMCYCINT)}}
}

func DISDEFWBUF_(p *Periph) RMACTLR {
	return RMACTLR{mmio.UM32{&p.ACTLR.U32, uint32(DISDEFWBUF)}}
}

func DISFOLD_(p *Periph) RMACTLR {
	return RMACTLR{mmio.UM32{&p.ACTLR.U32, uint32(DISFOLD)}}
}

func DISFPCA_(p *Periph) RMACTLR {
	return RMACTLR{mmio.UM32{&p.ACTLR.U32, uint32(DISFPCA)}}
}

func DISOOFP_(p *Periph) RMACTLR {
	return RMACTLR{mmio.UM32{&p.ACTLR.U32, uint32(DISOOFP)}}
}
