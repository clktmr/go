// DO NOT EDIT THIS FILE. GENERATED BY xgen.

package systick

import (
	"embedded/mmio"
	"unsafe"
)

type Periph struct {
	CSR   RCSR
	RVR   RRVR
	CVR   RCVR
	CALIB RCALIB
}

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func SYSTICK() *Periph { return (*Periph)(unsafe.Pointer(uintptr(0xE000E010))) }

type CSR uint32

type RCSR struct{ mmio.U32 }

func (r *RCSR) LoadBits(mask CSR) CSR { return CSR(r.U32.LoadBits(uint32(mask))) }
func (r *RCSR) StoreBits(mask, b CSR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCSR) SetBits(mask CSR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCSR) ClearBits(mask CSR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCSR) Load() CSR             { return CSR(r.U32.Load()) }
func (r *RCSR) Store(b CSR)           { r.U32.Store(uint32(b)) }

type RMCSR struct{ mmio.UM32 }

func (rm RMCSR) Load() CSR   { return CSR(rm.UM32.Load()) }
func (rm RMCSR) Store(b CSR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) ENABLE() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(ENABLE)}}
}

func (p *Periph) TICKINT() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(TICKINT)}}
}

func (p *Periph) CLKSOURCE() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(CLKSOURCE)}}
}

func (p *Periph) COUNTFLAG() RMCSR {
	return RMCSR{mmio.UM32{&p.CSR.U32, uint32(COUNTFLAG)}}
}

type RVR uint32

type RRVR struct{ mmio.U32 }

func (r *RRVR) LoadBits(mask RVR) RVR { return RVR(r.U32.LoadBits(uint32(mask))) }
func (r *RRVR) StoreBits(mask, b RVR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RRVR) SetBits(mask RVR)      { r.U32.SetBits(uint32(mask)) }
func (r *RRVR) ClearBits(mask RVR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RRVR) Load() RVR             { return RVR(r.U32.Load()) }
func (r *RRVR) Store(b RVR)           { r.U32.Store(uint32(b)) }

type RMRVR struct{ mmio.UM32 }

func (rm RMRVR) Load() RVR   { return RVR(rm.UM32.Load()) }
func (rm RMRVR) Store(b RVR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) RELOAD() RMRVR {
	return RMRVR{mmio.UM32{&p.RVR.U32, uint32(RELOAD)}}
}

type CVR uint32

type RCVR struct{ mmio.U32 }

func (r *RCVR) LoadBits(mask CVR) CVR { return CVR(r.U32.LoadBits(uint32(mask))) }
func (r *RCVR) StoreBits(mask, b CVR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCVR) SetBits(mask CVR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCVR) ClearBits(mask CVR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCVR) Load() CVR             { return CVR(r.U32.Load()) }
func (r *RCVR) Store(b CVR)           { r.U32.Store(uint32(b)) }

type RMCVR struct{ mmio.UM32 }

func (rm RMCVR) Load() CVR   { return CVR(rm.UM32.Load()) }
func (rm RMCVR) Store(b CVR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) CURRENT() RMCVR {
	return RMCVR{mmio.UM32{&p.CVR.U32, uint32(CURRENT)}}
}

type CALIB uint32

type RCALIB struct{ mmio.U32 }

func (r *RCALIB) LoadBits(mask CALIB) CALIB { return CALIB(r.U32.LoadBits(uint32(mask))) }
func (r *RCALIB) StoreBits(mask, b CALIB)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCALIB) SetBits(mask CALIB)        { r.U32.SetBits(uint32(mask)) }
func (r *RCALIB) ClearBits(mask CALIB)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCALIB) Load() CALIB               { return CALIB(r.U32.Load()) }
func (r *RCALIB) Store(b CALIB)             { r.U32.Store(uint32(b)) }

type RMCALIB struct{ mmio.UM32 }

func (rm RMCALIB) Load() CALIB   { return CALIB(rm.UM32.Load()) }
func (rm RMCALIB) Store(b CALIB) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TENMS() RMCALIB {
	return RMCALIB{mmio.UM32{&p.CALIB.U32, uint32(TENMS)}}
}

func (p *Periph) SKEW() RMCALIB {
	return RMCALIB{mmio.UM32{&p.CALIB.U32, uint32(SKEW)}}
}

func (p *Periph) NOREF() RMCALIB {
	return RMCALIB{mmio.UM32{&p.CALIB.U32, uint32(NOREF)}}
}
