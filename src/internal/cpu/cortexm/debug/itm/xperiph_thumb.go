// DO NOT EDIT THIS FILE. GENERATED BY xgen.

package itm

import (
	"embedded/mmio"
	"unsafe"
)

type ITM_Periph struct {
	STIM [256]RSTIM
	_    [640]uint32
	TER  [8]RTER
	_    [8]uint32
	TPR  RTPR
	_    [15]uint32
	TCR  RTCR
	_    [83]uint32
	PID  [8]RPID
	CID  [4]RCID
}

func (p *ITM_Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func ITM() *ITM_Periph { return (*ITM_Periph)(unsafe.Pointer(uintptr(0xE0000000))) }

type STIM uint32

type RSTIM struct{ mmio.U32 }

func (r *RSTIM) Bits(mask STIM) STIM    { return STIM(r.U32.Bits(uint32(mask))) }
func (r *RSTIM) StoreBits(mask, b STIM) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSTIM) SetBits(mask STIM)      { r.U32.SetBits(uint32(mask)) }
func (r *RSTIM) ClearBits(mask STIM)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSTIM) Load() STIM             { return STIM(r.U32.Load()) }
func (r *RSTIM) Store(b STIM)           { r.U32.Store(uint32(b)) }

type RMSTIM struct{ mmio.UM32 }

func (rm RMSTIM) Load() STIM   { return STIM(rm.UM32.Load()) }
func (rm RMSTIM) Store(b STIM) { rm.UM32.Store(uint32(b)) }

type TER uint32

type RTER struct{ mmio.U32 }

func (r *RTER) Bits(mask TER) TER     { return TER(r.U32.Bits(uint32(mask))) }
func (r *RTER) StoreBits(mask, b TER) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTER) SetBits(mask TER)      { r.U32.SetBits(uint32(mask)) }
func (r *RTER) ClearBits(mask TER)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTER) Load() TER             { return TER(r.U32.Load()) }
func (r *RTER) Store(b TER)           { r.U32.Store(uint32(b)) }

type RMTER struct{ mmio.UM32 }

func (rm RMTER) Load() TER   { return TER(rm.UM32.Load()) }
func (rm RMTER) Store(b TER) { rm.UM32.Store(uint32(b)) }

type TPR uint32

type RTPR struct{ mmio.U32 }

func (r *RTPR) Bits(mask TPR) TPR     { return TPR(r.U32.Bits(uint32(mask))) }
func (r *RTPR) StoreBits(mask, b TPR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTPR) SetBits(mask TPR)      { r.U32.SetBits(uint32(mask)) }
func (r *RTPR) ClearBits(mask TPR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTPR) Load() TPR             { return TPR(r.U32.Load()) }
func (r *RTPR) Store(b TPR)           { r.U32.Store(uint32(b)) }

type RMTPR struct{ mmio.UM32 }

func (rm RMTPR) Load() TPR   { return TPR(rm.UM32.Load()) }
func (rm RMTPR) Store(b TPR) { rm.UM32.Store(uint32(b)) }

type TCR uint32

type RTCR struct{ mmio.U32 }

func (r *RTCR) Bits(mask TCR) TCR     { return TCR(r.U32.Bits(uint32(mask))) }
func (r *RTCR) StoreBits(mask, b TCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RTCR) SetBits(mask TCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RTCR) ClearBits(mask TCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RTCR) Load() TCR             { return TCR(r.U32.Load()) }
func (r *RTCR) Store(b TCR)           { r.U32.Store(uint32(b)) }

type RMTCR struct{ mmio.UM32 }

func (rm RMTCR) Load() TCR   { return TCR(rm.UM32.Load()) }
func (rm RMTCR) Store(b TCR) { rm.UM32.Store(uint32(b)) }

func (p *ITM_Periph) ITMENA() RMTCR {
	return RMTCR{mmio.UM32{&p.TCR.U32, uint32(ITMENA)}}
}

func (p *ITM_Periph) TSENA() RMTCR {
	return RMTCR{mmio.UM32{&p.TCR.U32, uint32(TSENA)}}
}

func (p *ITM_Periph) SYNCENA() RMTCR {
	return RMTCR{mmio.UM32{&p.TCR.U32, uint32(SYNCENA)}}
}

func (p *ITM_Periph) TXENA() RMTCR {
	return RMTCR{mmio.UM32{&p.TCR.U32, uint32(TXENA)}}
}

func (p *ITM_Periph) SWOENA() RMTCR {
	return RMTCR{mmio.UM32{&p.TCR.U32, uint32(SWOENA)}}
}

func (p *ITM_Periph) TSPrescale() RMTCR {
	return RMTCR{mmio.UM32{&p.TCR.U32, uint32(TSPrescale)}}
}

func (p *ITM_Periph) GTSFREQ() RMTCR {
	return RMTCR{mmio.UM32{&p.TCR.U32, uint32(GTSFREQ)}}
}

func (p *ITM_Periph) TraceBusID() RMTCR {
	return RMTCR{mmio.UM32{&p.TCR.U32, uint32(TraceBusID)}}
}

func (p *ITM_Periph) BUSY() RMTCR {
	return RMTCR{mmio.UM32{&p.TCR.U32, uint32(BUSY)}}
}

type PID uint32

type RPID struct{ mmio.U32 }

func (r *RPID) Bits(mask PID) PID     { return PID(r.U32.Bits(uint32(mask))) }
func (r *RPID) StoreBits(mask, b PID) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RPID) SetBits(mask PID)      { r.U32.SetBits(uint32(mask)) }
func (r *RPID) ClearBits(mask PID)    { r.U32.ClearBits(uint32(mask)) }
func (r *RPID) Load() PID             { return PID(r.U32.Load()) }
func (r *RPID) Store(b PID)           { r.U32.Store(uint32(b)) }

type RMPID struct{ mmio.UM32 }

func (rm RMPID) Load() PID   { return PID(rm.UM32.Load()) }
func (rm RMPID) Store(b PID) { rm.UM32.Store(uint32(b)) }

type CID uint32

type RCID struct{ mmio.U32 }

func (r *RCID) Bits(mask CID) CID     { return CID(r.U32.Bits(uint32(mask))) }
func (r *RCID) StoreBits(mask, b CID) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCID) SetBits(mask CID)      { r.U32.SetBits(uint32(mask)) }
func (r *RCID) ClearBits(mask CID)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCID) Load() CID             { return CID(r.U32.Load()) }
func (r *RCID) Store(b CID)           { r.U32.Store(uint32(b)) }

type RMCID struct{ mmio.UM32 }

func (rm RMCID) Load() CID   { return CID(rm.UM32.Load()) }
func (rm RMCID) Store(b CID) { rm.UM32.Store(uint32(b)) }
