// DO NOT EDIT THIS FILE. GENERATED BY xgen.

package scb

import (
	"embedded/mmio"
	"unsafe"
)

type Periph struct {
	CPUID RCPUID
	ICSR  RICSR
	VTOR  RVTOR
	AIRCR RAIRCR
	SCR   RSCR
	CCR   RCCR
	SHPR1 RSHPR1
	SHPR2 RSHPR2
	SHPR3 RSHPR3
	SHCSR RSHCSR
	CFSR  RCFSR
	HFSR  RHFSR
	_     uint32
	MMFR  RMMFR
	BFAR  RBFAR
	AFSR  RAFSR
}

func (p *Periph) BaseAddr() uintptr {
	return uintptr(unsafe.Pointer(p))
}

func SCB() *Periph { return (*Periph)(unsafe.Pointer(uintptr(0xE000ED00))) }

type CPUID uint32

type RCPUID struct{ mmio.U32 }

func (r *RCPUID) LoadBits(mask CPUID) CPUID { return CPUID(r.U32.LoadBits(uint32(mask))) }
func (r *RCPUID) StoreBits(mask, b CPUID)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCPUID) SetBits(mask CPUID)        { r.U32.SetBits(uint32(mask)) }
func (r *RCPUID) ClearBits(mask CPUID)      { r.U32.ClearBits(uint32(mask)) }
func (r *RCPUID) Load() CPUID               { return CPUID(r.U32.Load()) }
func (r *RCPUID) Store(b CPUID)             { r.U32.Store(uint32(b)) }

type RMCPUID struct{ mmio.UM32 }

func (rm RMCPUID) Load() CPUID   { return CPUID(rm.UM32.Load()) }
func (rm RMCPUID) Store(b CPUID) { rm.UM32.Store(uint32(b)) }

func (p *Periph) Revision() RMCPUID {
	return RMCPUID{mmio.UM32{&p.CPUID.U32, uint32(Revision)}}
}

func (p *Periph) PartNo() RMCPUID {
	return RMCPUID{mmio.UM32{&p.CPUID.U32, uint32(PartNo)}}
}

func (p *Periph) Constant() RMCPUID {
	return RMCPUID{mmio.UM32{&p.CPUID.U32, uint32(Constant)}}
}

func (p *Periph) Variant() RMCPUID {
	return RMCPUID{mmio.UM32{&p.CPUID.U32, uint32(Variant)}}
}

func (p *Periph) Implementer() RMCPUID {
	return RMCPUID{mmio.UM32{&p.CPUID.U32, uint32(Implementer)}}
}

type ICSR uint32

type RICSR struct{ mmio.U32 }

func (r *RICSR) LoadBits(mask ICSR) ICSR { return ICSR(r.U32.LoadBits(uint32(mask))) }
func (r *RICSR) StoreBits(mask, b ICSR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RICSR) SetBits(mask ICSR)       { r.U32.SetBits(uint32(mask)) }
func (r *RICSR) ClearBits(mask ICSR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RICSR) Load() ICSR              { return ICSR(r.U32.Load()) }
func (r *RICSR) Store(b ICSR)            { r.U32.Store(uint32(b)) }

type RMICSR struct{ mmio.UM32 }

func (rm RMICSR) Load() ICSR   { return ICSR(rm.UM32.Load()) }
func (rm RMICSR) Store(b ICSR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) VECTACTIVE() RMICSR {
	return RMICSR{mmio.UM32{&p.ICSR.U32, uint32(VECTACTIVE)}}
}

func (p *Periph) RETTOBASE() RMICSR {
	return RMICSR{mmio.UM32{&p.ICSR.U32, uint32(RETTOBASE)}}
}

func (p *Periph) VECTPENDING() RMICSR {
	return RMICSR{mmio.UM32{&p.ICSR.U32, uint32(VECTPENDING)}}
}

func (p *Periph) ISRPENDING() RMICSR {
	return RMICSR{mmio.UM32{&p.ICSR.U32, uint32(ISRPENDING)}}
}

func (p *Periph) PENDSTCLR() RMICSR {
	return RMICSR{mmio.UM32{&p.ICSR.U32, uint32(PENDSTCLR)}}
}

func (p *Periph) PENDSTSET() RMICSR {
	return RMICSR{mmio.UM32{&p.ICSR.U32, uint32(PENDSTSET)}}
}

func (p *Periph) PENDSVCLR() RMICSR {
	return RMICSR{mmio.UM32{&p.ICSR.U32, uint32(PENDSVCLR)}}
}

func (p *Periph) PENDSVSET() RMICSR {
	return RMICSR{mmio.UM32{&p.ICSR.U32, uint32(PENDSVSET)}}
}

func (p *Periph) NMIPENDSET() RMICSR {
	return RMICSR{mmio.UM32{&p.ICSR.U32, uint32(NMIPENDSET)}}
}

type VTOR uint32

type RVTOR struct{ mmio.U32 }

func (r *RVTOR) LoadBits(mask VTOR) VTOR { return VTOR(r.U32.LoadBits(uint32(mask))) }
func (r *RVTOR) StoreBits(mask, b VTOR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RVTOR) SetBits(mask VTOR)       { r.U32.SetBits(uint32(mask)) }
func (r *RVTOR) ClearBits(mask VTOR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RVTOR) Load() VTOR              { return VTOR(r.U32.Load()) }
func (r *RVTOR) Store(b VTOR)            { r.U32.Store(uint32(b)) }

type RMVTOR struct{ mmio.UM32 }

func (rm RMVTOR) Load() VTOR   { return VTOR(rm.UM32.Load()) }
func (rm RMVTOR) Store(b VTOR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) TBLOFF() RMVTOR {
	return RMVTOR{mmio.UM32{&p.VTOR.U32, uint32(TBLOFF)}}
}

type AIRCR uint32

type RAIRCR struct{ mmio.U32 }

func (r *RAIRCR) LoadBits(mask AIRCR) AIRCR { return AIRCR(r.U32.LoadBits(uint32(mask))) }
func (r *RAIRCR) StoreBits(mask, b AIRCR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAIRCR) SetBits(mask AIRCR)        { r.U32.SetBits(uint32(mask)) }
func (r *RAIRCR) ClearBits(mask AIRCR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RAIRCR) Load() AIRCR               { return AIRCR(r.U32.Load()) }
func (r *RAIRCR) Store(b AIRCR)             { r.U32.Store(uint32(b)) }

type RMAIRCR struct{ mmio.UM32 }

func (rm RMAIRCR) Load() AIRCR   { return AIRCR(rm.UM32.Load()) }
func (rm RMAIRCR) Store(b AIRCR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) VECTRESET() RMAIRCR {
	return RMAIRCR{mmio.UM32{&p.AIRCR.U32, uint32(VECTRESET)}}
}

func (p *Periph) VECTCLRACTIVE() RMAIRCR {
	return RMAIRCR{mmio.UM32{&p.AIRCR.U32, uint32(VECTCLRACTIVE)}}
}

func (p *Periph) SYSRESETREQ() RMAIRCR {
	return RMAIRCR{mmio.UM32{&p.AIRCR.U32, uint32(SYSRESETREQ)}}
}

func (p *Periph) PRIGROUP() RMAIRCR {
	return RMAIRCR{mmio.UM32{&p.AIRCR.U32, uint32(PRIGROUP)}}
}

func (p *Periph) ENDIANNESS() RMAIRCR {
	return RMAIRCR{mmio.UM32{&p.AIRCR.U32, uint32(ENDIANNESS)}}
}

func (p *Periph) VECTKEY() RMAIRCR {
	return RMAIRCR{mmio.UM32{&p.AIRCR.U32, uint32(VECTKEY)}}
}

type SCR uint32

type RSCR struct{ mmio.U32 }

func (r *RSCR) LoadBits(mask SCR) SCR { return SCR(r.U32.LoadBits(uint32(mask))) }
func (r *RSCR) StoreBits(mask, b SCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSCR) SetBits(mask SCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RSCR) ClearBits(mask SCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RSCR) Load() SCR             { return SCR(r.U32.Load()) }
func (r *RSCR) Store(b SCR)           { r.U32.Store(uint32(b)) }

type RMSCR struct{ mmio.UM32 }

func (rm RMSCR) Load() SCR   { return SCR(rm.UM32.Load()) }
func (rm RMSCR) Store(b SCR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) SLEEPONEXIT() RMSCR {
	return RMSCR{mmio.UM32{&p.SCR.U32, uint32(SLEEPONEXIT)}}
}

func (p *Periph) SLEEPDEEP() RMSCR {
	return RMSCR{mmio.UM32{&p.SCR.U32, uint32(SLEEPDEEP)}}
}

func (p *Periph) SEVONPEND() RMSCR {
	return RMSCR{mmio.UM32{&p.SCR.U32, uint32(SEVONPEND)}}
}

type CCR uint32

type RCCR struct{ mmio.U32 }

func (r *RCCR) LoadBits(mask CCR) CCR { return CCR(r.U32.LoadBits(uint32(mask))) }
func (r *RCCR) StoreBits(mask, b CCR) { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCCR) SetBits(mask CCR)      { r.U32.SetBits(uint32(mask)) }
func (r *RCCR) ClearBits(mask CCR)    { r.U32.ClearBits(uint32(mask)) }
func (r *RCCR) Load() CCR             { return CCR(r.U32.Load()) }
func (r *RCCR) Store(b CCR)           { r.U32.Store(uint32(b)) }

type RMCCR struct{ mmio.UM32 }

func (rm RMCCR) Load() CCR   { return CCR(rm.UM32.Load()) }
func (rm RMCCR) Store(b CCR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) NONBASETHRDENA() RMCCR {
	return RMCCR{mmio.UM32{&p.CCR.U32, uint32(NONBASETHRDENA)}}
}

func (p *Periph) USERSETMPEND() RMCCR {
	return RMCCR{mmio.UM32{&p.CCR.U32, uint32(USERSETMPEND)}}
}

func (p *Periph) UNALIGN_TRP() RMCCR {
	return RMCCR{mmio.UM32{&p.CCR.U32, uint32(UNALIGN_TRP)}}
}

func (p *Periph) DIV_0_TRP() RMCCR {
	return RMCCR{mmio.UM32{&p.CCR.U32, uint32(DIV_0_TRP)}}
}

func (p *Periph) BFHFNMIGN() RMCCR {
	return RMCCR{mmio.UM32{&p.CCR.U32, uint32(BFHFNMIGN)}}
}

func (p *Periph) STKALIGN() RMCCR {
	return RMCCR{mmio.UM32{&p.CCR.U32, uint32(STKALIGN)}}
}

func (p *Periph) DC() RMCCR {
	return RMCCR{mmio.UM32{&p.CCR.U32, uint32(DC)}}
}

func (p *Periph) IC() RMCCR {
	return RMCCR{mmio.UM32{&p.CCR.U32, uint32(IC)}}
}

func (p *Periph) BP() RMCCR {
	return RMCCR{mmio.UM32{&p.CCR.U32, uint32(BP)}}
}

type SHPR1 uint32

type RSHPR1 struct{ mmio.U32 }

func (r *RSHPR1) LoadBits(mask SHPR1) SHPR1 { return SHPR1(r.U32.LoadBits(uint32(mask))) }
func (r *RSHPR1) StoreBits(mask, b SHPR1)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSHPR1) SetBits(mask SHPR1)        { r.U32.SetBits(uint32(mask)) }
func (r *RSHPR1) ClearBits(mask SHPR1)      { r.U32.ClearBits(uint32(mask)) }
func (r *RSHPR1) Load() SHPR1               { return SHPR1(r.U32.Load()) }
func (r *RSHPR1) Store(b SHPR1)             { r.U32.Store(uint32(b)) }

type RMSHPR1 struct{ mmio.UM32 }

func (rm RMSHPR1) Load() SHPR1   { return SHPR1(rm.UM32.Load()) }
func (rm RMSHPR1) Store(b SHPR1) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PRI_MemManage() RMSHPR1 {
	return RMSHPR1{mmio.UM32{&p.SHPR1.U32, uint32(PRI_MemManage)}}
}

func (p *Periph) PRI_BusFault() RMSHPR1 {
	return RMSHPR1{mmio.UM32{&p.SHPR1.U32, uint32(PRI_BusFault)}}
}

func (p *Periph) PRI_UsageFault() RMSHPR1 {
	return RMSHPR1{mmio.UM32{&p.SHPR1.U32, uint32(PRI_UsageFault)}}
}

type SHPR2 uint32

type RSHPR2 struct{ mmio.U32 }

func (r *RSHPR2) LoadBits(mask SHPR2) SHPR2 { return SHPR2(r.U32.LoadBits(uint32(mask))) }
func (r *RSHPR2) StoreBits(mask, b SHPR2)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSHPR2) SetBits(mask SHPR2)        { r.U32.SetBits(uint32(mask)) }
func (r *RSHPR2) ClearBits(mask SHPR2)      { r.U32.ClearBits(uint32(mask)) }
func (r *RSHPR2) Load() SHPR2               { return SHPR2(r.U32.Load()) }
func (r *RSHPR2) Store(b SHPR2)             { r.U32.Store(uint32(b)) }

type RMSHPR2 struct{ mmio.UM32 }

func (rm RMSHPR2) Load() SHPR2   { return SHPR2(rm.UM32.Load()) }
func (rm RMSHPR2) Store(b SHPR2) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PRI_SVCall() RMSHPR2 {
	return RMSHPR2{mmio.UM32{&p.SHPR2.U32, uint32(PRI_SVCall)}}
}

type SHPR3 uint32

type RSHPR3 struct{ mmio.U32 }

func (r *RSHPR3) LoadBits(mask SHPR3) SHPR3 { return SHPR3(r.U32.LoadBits(uint32(mask))) }
func (r *RSHPR3) StoreBits(mask, b SHPR3)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSHPR3) SetBits(mask SHPR3)        { r.U32.SetBits(uint32(mask)) }
func (r *RSHPR3) ClearBits(mask SHPR3)      { r.U32.ClearBits(uint32(mask)) }
func (r *RSHPR3) Load() SHPR3               { return SHPR3(r.U32.Load()) }
func (r *RSHPR3) Store(b SHPR3)             { r.U32.Store(uint32(b)) }

type RMSHPR3 struct{ mmio.UM32 }

func (rm RMSHPR3) Load() SHPR3   { return SHPR3(rm.UM32.Load()) }
func (rm RMSHPR3) Store(b SHPR3) { rm.UM32.Store(uint32(b)) }

func (p *Periph) PRI_PendSV() RMSHPR3 {
	return RMSHPR3{mmio.UM32{&p.SHPR3.U32, uint32(PRI_PendSV)}}
}

func (p *Periph) PRI_SysTick() RMSHPR3 {
	return RMSHPR3{mmio.UM32{&p.SHPR3.U32, uint32(PRI_SysTick)}}
}

type SHCSR uint32

type RSHCSR struct{ mmio.U32 }

func (r *RSHCSR) LoadBits(mask SHCSR) SHCSR { return SHCSR(r.U32.LoadBits(uint32(mask))) }
func (r *RSHCSR) StoreBits(mask, b SHCSR)   { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RSHCSR) SetBits(mask SHCSR)        { r.U32.SetBits(uint32(mask)) }
func (r *RSHCSR) ClearBits(mask SHCSR)      { r.U32.ClearBits(uint32(mask)) }
func (r *RSHCSR) Load() SHCSR               { return SHCSR(r.U32.Load()) }
func (r *RSHCSR) Store(b SHCSR)             { r.U32.Store(uint32(b)) }

type RMSHCSR struct{ mmio.UM32 }

func (rm RMSHCSR) Load() SHCSR   { return SHCSR(rm.UM32.Load()) }
func (rm RMSHCSR) Store(b SHCSR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) MEMFAULTACT() RMSHCSR {
	return RMSHCSR{mmio.UM32{&p.SHCSR.U32, uint32(MEMFAULTACT)}}
}

func (p *Periph) BUSFAULTACT() RMSHCSR {
	return RMSHCSR{mmio.UM32{&p.SHCSR.U32, uint32(BUSFAULTACT)}}
}

func (p *Periph) USGFAULTACT() RMSHCSR {
	return RMSHCSR{mmio.UM32{&p.SHCSR.U32, uint32(USGFAULTACT)}}
}

func (p *Periph) SVCALLACT() RMSHCSR {
	return RMSHCSR{mmio.UM32{&p.SHCSR.U32, uint32(SVCALLACT)}}
}

func (p *Periph) MONITORACT() RMSHCSR {
	return RMSHCSR{mmio.UM32{&p.SHCSR.U32, uint32(MONITORACT)}}
}

func (p *Periph) PENDSVACT() RMSHCSR {
	return RMSHCSR{mmio.UM32{&p.SHCSR.U32, uint32(PENDSVACT)}}
}

func (p *Periph) SYSTICKACT() RMSHCSR {
	return RMSHCSR{mmio.UM32{&p.SHCSR.U32, uint32(SYSTICKACT)}}
}

func (p *Periph) USGFAULTPENDED() RMSHCSR {
	return RMSHCSR{mmio.UM32{&p.SHCSR.U32, uint32(USGFAULTPENDED)}}
}

func (p *Periph) MEMFAULTPENDED() RMSHCSR {
	return RMSHCSR{mmio.UM32{&p.SHCSR.U32, uint32(MEMFAULTPENDED)}}
}

func (p *Periph) BUSFAULTPENDED() RMSHCSR {
	return RMSHCSR{mmio.UM32{&p.SHCSR.U32, uint32(BUSFAULTPENDED)}}
}

func (p *Periph) SVCALLPENDED() RMSHCSR {
	return RMSHCSR{mmio.UM32{&p.SHCSR.U32, uint32(SVCALLPENDED)}}
}

func (p *Periph) MEMFAULTENA() RMSHCSR {
	return RMSHCSR{mmio.UM32{&p.SHCSR.U32, uint32(MEMFAULTENA)}}
}

func (p *Periph) BUSFAULTENA() RMSHCSR {
	return RMSHCSR{mmio.UM32{&p.SHCSR.U32, uint32(BUSFAULTENA)}}
}

func (p *Periph) USGFAULTENA() RMSHCSR {
	return RMSHCSR{mmio.UM32{&p.SHCSR.U32, uint32(USGFAULTENA)}}
}

type CFSR uint32

type RCFSR struct{ mmio.U32 }

func (r *RCFSR) LoadBits(mask CFSR) CFSR { return CFSR(r.U32.LoadBits(uint32(mask))) }
func (r *RCFSR) StoreBits(mask, b CFSR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RCFSR) SetBits(mask CFSR)       { r.U32.SetBits(uint32(mask)) }
func (r *RCFSR) ClearBits(mask CFSR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RCFSR) Load() CFSR              { return CFSR(r.U32.Load()) }
func (r *RCFSR) Store(b CFSR)            { r.U32.Store(uint32(b)) }

type RMCFSR struct{ mmio.UM32 }

func (rm RMCFSR) Load() CFSR   { return CFSR(rm.UM32.Load()) }
func (rm RMCFSR) Store(b CFSR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) IACCVIOL() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(IACCVIOL)}}
}

func (p *Periph) DACCVIOL() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(DACCVIOL)}}
}

func (p *Periph) MUNSTKERR() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(MUNSTKERR)}}
}

func (p *Periph) MSTKERR() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(MSTKERR)}}
}

func (p *Periph) MLSPERR() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(MLSPERR)}}
}

func (p *Periph) MMARVALID() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(MMARVALID)}}
}

func (p *Periph) IBUSERR() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(IBUSERR)}}
}

func (p *Periph) PRECISERR() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(PRECISERR)}}
}

func (p *Periph) IMPRECISERR() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(IMPRECISERR)}}
}

func (p *Periph) UNSTKERR() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(UNSTKERR)}}
}

func (p *Periph) STKERR() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(STKERR)}}
}

func (p *Periph) LSPERR() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(LSPERR)}}
}

func (p *Periph) BFARVALID() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(BFARVALID)}}
}

func (p *Periph) UNDEFINSTR() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(UNDEFINSTR)}}
}

func (p *Periph) INVSTATE() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(INVSTATE)}}
}

func (p *Periph) INVPC() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(INVPC)}}
}

func (p *Periph) NOCP() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(NOCP)}}
}

func (p *Periph) UNALIGNED() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(UNALIGNED)}}
}

func (p *Periph) DIVBYZERO() RMCFSR {
	return RMCFSR{mmio.UM32{&p.CFSR.U32, uint32(DIVBYZERO)}}
}

type HFSR uint32

type RHFSR struct{ mmio.U32 }

func (r *RHFSR) LoadBits(mask HFSR) HFSR { return HFSR(r.U32.LoadBits(uint32(mask))) }
func (r *RHFSR) StoreBits(mask, b HFSR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RHFSR) SetBits(mask HFSR)       { r.U32.SetBits(uint32(mask)) }
func (r *RHFSR) ClearBits(mask HFSR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RHFSR) Load() HFSR              { return HFSR(r.U32.Load()) }
func (r *RHFSR) Store(b HFSR)            { r.U32.Store(uint32(b)) }

type RMHFSR struct{ mmio.UM32 }

func (rm RMHFSR) Load() HFSR   { return HFSR(rm.UM32.Load()) }
func (rm RMHFSR) Store(b HFSR) { rm.UM32.Store(uint32(b)) }

func (p *Periph) VECTTBL() RMHFSR {
	return RMHFSR{mmio.UM32{&p.HFSR.U32, uint32(VECTTBL)}}
}

func (p *Periph) FORCED() RMHFSR {
	return RMHFSR{mmio.UM32{&p.HFSR.U32, uint32(FORCED)}}
}

func (p *Periph) DEBUGEVT() RMHFSR {
	return RMHFSR{mmio.UM32{&p.HFSR.U32, uint32(DEBUGEVT)}}
}

type MMFR uint32

type RMMFR struct{ mmio.U32 }

func (r *RMMFR) LoadBits(mask MMFR) MMFR { return MMFR(r.U32.LoadBits(uint32(mask))) }
func (r *RMMFR) StoreBits(mask, b MMFR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RMMFR) SetBits(mask MMFR)       { r.U32.SetBits(uint32(mask)) }
func (r *RMMFR) ClearBits(mask MMFR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RMMFR) Load() MMFR              { return MMFR(r.U32.Load()) }
func (r *RMMFR) Store(b MMFR)            { r.U32.Store(uint32(b)) }

type RMMMFR struct{ mmio.UM32 }

func (rm RMMMFR) Load() MMFR   { return MMFR(rm.UM32.Load()) }
func (rm RMMMFR) Store(b MMFR) { rm.UM32.Store(uint32(b)) }

type BFAR uint32

type RBFAR struct{ mmio.U32 }

func (r *RBFAR) LoadBits(mask BFAR) BFAR { return BFAR(r.U32.LoadBits(uint32(mask))) }
func (r *RBFAR) StoreBits(mask, b BFAR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RBFAR) SetBits(mask BFAR)       { r.U32.SetBits(uint32(mask)) }
func (r *RBFAR) ClearBits(mask BFAR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RBFAR) Load() BFAR              { return BFAR(r.U32.Load()) }
func (r *RBFAR) Store(b BFAR)            { r.U32.Store(uint32(b)) }

type RMBFAR struct{ mmio.UM32 }

func (rm RMBFAR) Load() BFAR   { return BFAR(rm.UM32.Load()) }
func (rm RMBFAR) Store(b BFAR) { rm.UM32.Store(uint32(b)) }

type AFSR uint32

type RAFSR struct{ mmio.U32 }

func (r *RAFSR) LoadBits(mask AFSR) AFSR { return AFSR(r.U32.LoadBits(uint32(mask))) }
func (r *RAFSR) StoreBits(mask, b AFSR)  { r.U32.StoreBits(uint32(mask), uint32(b)) }
func (r *RAFSR) SetBits(mask AFSR)       { r.U32.SetBits(uint32(mask)) }
func (r *RAFSR) ClearBits(mask AFSR)     { r.U32.ClearBits(uint32(mask)) }
func (r *RAFSR) Load() AFSR              { return AFSR(r.U32.Load()) }
func (r *RAFSR) Store(b AFSR)            { r.U32.Store(uint32(b)) }

type RMAFSR struct{ mmio.UM32 }

func (rm RMAFSR) Load() AFSR   { return AFSR(rm.UM32.Load()) }
func (rm RMAFSR) Store(b AFSR) { rm.UM32.Store(uint32(b)) }
